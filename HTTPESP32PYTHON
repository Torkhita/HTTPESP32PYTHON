import network
import socket
import time
from machine import Pin

# Configuración WiFi
WIFI_SSID = "Wokwi-GUEST"
WIFI_PASSWORD = ""
WIFI_CHANNEL = 6

# Configuración de pines LED
LED1 = Pin(26, Pin.OUT)
LED2 = Pin(27, Pin.OUT)

led1_state = False
led2_state = False

# Inicializar WiFi
wifi = network.WLAN(network.STA_IF)
wifi.active(True)
wifi.connect(WIFI_SSID, WIFI_PASSWORD, channel=WIFI_CHANNEL)

print("Connecting to WiFi", WIFI_SSID, end="")
while not wifi.isconnected():
    print(".", end="")
    time.sleep(0.1)
print(" Connected!")

print("IP address:", wifi.ifconfig()[0])

def send_html():
    html_template = """<!DOCTYPE html><html>
      <head>
        <title>ESP32 Web Server Demo</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          html { font-family: sans-serif; text-align: center; }
          body { display: inline-flex; flex-direction: column; }
          h1 { margin-bottom: 1.2em; } 
          h2 { margin: 0; }
          div { display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: auto auto; grid-auto-flow: column; grid-gap: 1em; }
          .btn { background-color: #5B5; border: none; color: #fff; padding: 0.5em 1em;
                 font-size: 2em; text-decoration: none }
          .btn.OFF { background-color: #333; }
        </style>
      </head>
            
      <body>
        <h1>ESP32 Web Server</h1>

        <div>
          <h2>LED 1</h2>
          <a href="/toggle/1" class="btn">LED1_TEXT</a>
          <h2>LED 2</h2>
          <a href="/toggle/2" class="btn">LED2_TEXT</a>
        </div>
      </body>
    </html>"""
    
    led1_text = "ON" if led1_state else "OFF"
    led2_text = "ON" if led2_state else "OFF"
    
    html = html_template.replace("LED1_TEXT", led1_text)
    html = html_response.replace("LED2_TEXT", led2_text)
    
    return html

def handle_request(client_socket, request):
    global led1_state, led2_state
    
    try:
        request = request.decode('utf-8')
        lines = request.split('\n')
        if len(lines) > 0:
            first_line = lines[0]
            print("Request:", first_line.strip())
            
            # Manejar ruta raíz
            if "GET / " in first_line or "GET / HTTP" in first_line:
                response = "HTTP/1.1 200 OK\r\n"
                response += "Content-Type: text/html\r\n"
                response += "Connection: close\r\n\r\n"
                response += send_html()
                client_socket.send(response.encode())
            
            # Manejar toggle de LEDs
            elif "GET /toggle/1" in first_line:
                led1_state = not led1_state
                LED1.value(led1_state)
                print("Toggle LED #1 ->", "ON" if led1_state else "OFF")
                
                response = "HTTP/1.1 200 OK\r\n"
                response += "Content-Type: text/html\r\n"
                response += "Connection: close\r\n\r\n"
                response += send_html()
                client_socket.send(response.encode())
                
            elif "GET /toggle/2" in first_line:
                led2_state = not led2_state
                LED2.value(led2_state)
                print("Toggle LED #2 ->", "ON" if led2_state else "OFF")
                
                response = "HTTP/1.1 200 OK\r\n"
                response += "Content-Type: text/html\r\n"
                response += "Connection: close\r\n\r\n"
                response += send_html()
                client_socket.send(response.encode())
            
            else:
                # Página no encontrada
                response = "HTTP/1.1 404 Not Found\r\n\r\n"
                client_socket.send(response.encode())
                
    except Exception as e:
        print("Error handling request:", e)

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('0.0.0.0', 80))
    server_socket.listen(5)
    
    print("HTTP server started on port 80")
    
    while True:
        try:
            client_socket, addr = server_socket.accept()
            print("Client connected from:", addr)
            
            request = client_socket.recv(1024)
            if request:
                handle_request(client_socket, request)
            
            client_socket.close()
            time.sleep(0.002)
            
        except Exception as e:
            print("Server error:", e)
            time.sleep(1)

# Iniciar el servidor
try:
    start_server()
except KeyboardInterrupt:
    print("Server stopped")